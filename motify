#!/usr/bin/env bash

# motify: notify-send with memory.
#
# Much like `notify-send`, but requires application name to be passed and, unless the `-n` option is
# used, re-uses the last notification (if any) sent from the application name specified.
#
# Requires `flock` and `gdbus`.

# Working directory.
WD=/tmp/motify_${USER?}

if [[ ! -e $WD ]]; then
    # `mkdir` may fail with `EEXIST` because of other instances of this script running in parallelâ€¦
    # but `mkdir -p` ignores `EEXIST`! So we use `|| exit $?` and not `|| true`.
    mkdir -m700 -p "$WD" || exit $?
fi

usage() {
    cat >&2 <<EOF
USAGE: ${0##*/} [options] appname summary body
    where appname can only contain ASCII letters, digits, underscores and dashes, and
      dashes, can not be empty or start with a dash.

OPTIONS:
    -n: show new notification instead of possibly re-using old one.
    -t timeout: specify timeout in milliseconds (0 for no timeout, -1 for default one).
    -i icon: specify path to notification icon.
    -u number: specify notification urgency (0 for low, 1 for normal, 2 for critical).
EOF
    exit 2
}

timeout=-1
icon=
urgency=
reuse=1
while getopts 'nt:i:u:' option; do
    case "$option" in
        n) reuse=0 ;;
        t) timeout=$OPTARG ;;
        i) icon=$OPTARG ;;
        u)
            if [[ $OPTARG != [012] ]]; then
                echo >&2 "E: Ivalid urgency."
                usage
            fi
            urgency=$OPTARG
            ;;
        *) usage ;;
    esac
done
shift $(( OPTIND - 1 ))
(( $# == 3 )) || usage
if ! [[ $1 =~ ^[0-9a-zA-Z_][-0-9a-zA-Z_]*$ ]]; then
    echo >&2 "E: invalid appname."
    usage
fi
file=$WD/$1
# One thing worth commenting is `$((id))` construct. `$((...))` is arithmetic context, and `$((id))`
# substitutes 0 if `$id` does not look like a number.
exec flock --no-fork "$file" "$BASH" -c '
unset id
(( $0 )) && read id < "$1"
d=org.freedesktop.Notifications
out=$(gdbus call --session --dest "$d" --object-path /"${d//.//}" --method "$d".Notify -- \
	"$2" "$((id))" "$3" "$4" "$5" "[]" "{${7:+"\"urgency\":<byte $7>"}}" "$6") || exit $?
[[ $out =~ ^\(uint32\ ([0-9]+),\)$ ]] || { echo >&2 "E: unexpected gdbus output: $out"; exit 1; }
echo "${BASH_REMATCH[1]}" > "$1"' "$reuse" "$file" "$1" "$icon" "$2" "$3" "$timeout" "$urgency"
