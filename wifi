#!/usr/bin/env python3
import os
import signal
import subprocess
import sys
import dbus


DECORATE_ATTRS = {
    'brackets': '34',
    'number': '1;34',
    'plain': '0',
    'sign': '1;34',
    'info': '36',
    'prompt': '1;34',
    'error': '1;31',
    'connected_text': '35',
    'connected_mark': '1;35',
    'type_mark': '34',
    'gauge_bright': '37',
    'gauge_dim': '34',
}


def decorate(style, s):
    return f'\033[{DECORATE_ATTRS[style]}m{s}\033[0m'


def clear():
    sys.stdout.write('\033[H\033[J')
    sys.stdout.flush()


class IwdDevice:
    def __init__(self, path, name):
        self.path = path
        self.name = name


class IwdNetwork:
    def __init__(self, path, name, dbm, type_str, connected):
        self.path = path
        self.name = name
        self.dbm = dbm
        self.type_str = type_str
        self.connected = connected


class IwdConnection:
    def __init__(self):
        self.bus = dbus.SystemBus()

    def _fetch_managed_objects(self):
        mgr_iface = dbus.Interface(
            self.bus.get_object('net.connman.iwd', '/'),
            'org.freedesktop.DBus.ObjectManager')
        return dict(mgr_iface.GetManagedObjects())

    def fetch_devices(self):
        objs = self._fetch_managed_objects()
        for k, v in objs.items():
            dev = v.get('net.connman.iwd.Device')
            if dev is not None:
                yield IwdDevice(
                    path=str(k),
                    name=str(dev['Name']))

    # returns a bool indicating if this is a new scan
    def scan(self, device):
        station_iface = dbus.Interface(
            self.bus.get_object('net.connman.iwd', device.path),
            'net.connman.iwd.Station')

        try:
            station_iface.Scan()
            return True
        except dbus.exceptions.DBusException as ex:
            name = ex.get_dbus_name()
            if name == 'net.connman.iwd.InProgress':
                return False
            raise

    def fetch_networks(self, device):
        station_iface = dbus.Interface(
            self.bus.get_object('net.connman.iwd', device.path),
            'net.connman.iwd.Station')

        networks = station_iface.GetOrderedNetworks()

        objs = self._fetch_managed_objects()

        for path, rssi in networks:
            obj = objs.get(path)
            if obj is not None:
                net = obj['net.connman.iwd.Network']
                yield IwdNetwork(
                    path=str(path),
                    name=str(net['Name']),
                    dbm=int(rssi) / 100,
                    type_str=str(net['Type']),
                    connected=bool(net['Connected']))


def ask(prompt, extra_choices=''):
    while True:
        s = input(prompt).strip()
        if s.isdigit():
            return int(s)
        if len(s) == 1 and s in extra_choices:
            return s
        print(decorate(
            'error',
            'Not understood! Try again…'))


def choose(prompt, lines, extra_choices=''):
    left_bracket = decorate('brackets', '[')
    right_bracket = decorate('brackets', ']')
    for i, line in enumerate(lines):
        num = decorate('number', '{:2d}'.format(i + 1))
        print(f'{left_bracket}{num}{right_bracket} {line}')

    while True:
        answer = ask(prompt, extra_choices)
        if isinstance(answer, int):
            index = answer - 1
            if index not in range(len(lines)):
                print(decorate(
                    'error',
                    'Number is out of range! Try again…'))
                continue
            return index
        return answer


def network_to_str(network):
    name = ''.join(filter(lambda s: s.isprintable(), network.name))

    if network.connected:
        mark = decorate('connected_mark', '(*)')
        text = decorate('connected_text', name)
        styled_name = f'{mark} {text}'
    else:
        styled_name = name

    if network.type_str == 'open':
        type_mark = 'open '
    elif network.type_str == 'psk':
        type_mark = ' psk '
    elif network.type_str == '8021x':
        type_mark = '8021x'
    else:
        type_mark = '(???)'

    gauge = make_gauge(network.dbm, size=5)

    return f'{decorate("type_mark", type_mark)} {gauge} {styled_name}'


def network_loop(conn, device):
    while True:
        networks = list(conn.fetch_networks(device))

        print(decorate(
            'info',
            'Input: <number> → connect, “u” → update list, “r” → rescan.'))
        answer = choose(
            prompt=decorate('prompt', '>>> '),
            lines=[network_to_str(network) for network in networks],
            extra_choices='ur')

        if answer == 'u':
            clear()
            continue
        elif answer == 'r':
            return None
        else:
            return networks[answer]


def scan_loop(conn, device):
    while True:
        clear()

        if conn.scan(device):
            sign = decorate('sign', '--><--')
            text = decorate('info', 'New scan initiated.')
        else:
            sign = decorate('sign', '<~~~~>')
            text = decorate('info', 'Already scanning.')
        print(f'{sign} {text}')

        network = network_loop(conn, device)
        if network is not None:
            return network


def make_gauge(dbm, size):
    MAX_DBM = -20
    MIN_DBM = -90

    level = 1 - 0.7 * (MAX_DBM - dbm) / (MAX_DBM - MIN_DBM)

    nbright = round(level * size)

    return (
        decorate('gauge_bright', '•' + '}' * nbright) +
        decorate('gauge_dim', '}' * (size - nbright)))


def main():
    signal.signal(signal.SIGINT, lambda *_: os._exit(1))

    conn = IwdConnection()
    devices = list(conn.fetch_devices())
    if not devices:
        print('No iwd devices found!')
        exit(1)

    if len(devices) == 1:
        device = devices[0]
    else:
        print(decorate(
            'info',
            'Found multiple iwd devices, which is quite unexpected.'))
        print(decorate(
            'info',
            'Which one to use? (Enter a number.)'))
        answer = choose(
            prompt=decorate('prompt', '>>> '),
            lines=[device.name for device in devices])
        device = devices[answer]

    network = scan_loop(conn, device)

    while True:
        p = subprocess.run([
            'iwctl',
            'station',
            device.name,
            'connect',
            network.name,
        ])
        if p.returncode == 0:
            break
        input('Retry? (Enter/Ctrl+C) >>> ')


if __name__ == '__main__':
    main()
